version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: legal-crm-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-secretpassword}
      MONGO_INITDB_DATABASE: legal-crm
    volumes:
      - mongodb_data:/data/db
      - ./backend/scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - legal-crm-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: legal-crm-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispassword}
    volumes:
      - redis_data:/data
    networks:
      - legal-crm-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: legal-crm-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      MONGO_URI: mongodb://admin:${MONGO_PASSWORD:-secretpassword}@mongodb:27017/legal-crm?authSource=admin
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redispassword}
      JWT_SECRET: ${JWT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
      - ./backend/backups:/app/backups
    networks:
      - legal-crm-network

  # Admin Portal
  admin-portal:
    build:
      context: ./
      dockerfile: Dockerfile.frontend
      args:
        PORTAL: admin
    container_name: legal-crm-admin
    restart: unless-stopped
    ports:
      - "3001:80"
    environment:
      REACT_APP_API_URL: http://backend:5000/api/v1
      REACT_APP_WS_URL: ws://backend:5000
    depends_on:
      - backend
    networks:
      - legal-crm-network

  # Supervisor Portal
  supervisor-portal:
    build:
      context: ./
      dockerfile: Dockerfile.frontend
      args:
        PORTAL: supervisor
    container_name: legal-crm-supervisor
    restart: unless-stopped
    ports:
      - "3002:80"
    environment:
      REACT_APP_API_URL: http://backend:5000/api/v1
      REACT_APP_WS_URL: ws://backend:5000
    depends_on:
      - backend
    networks:
      - legal-crm-network

  # Secretary Portal
  secretary-portal:
    build:
      context: ./
      dockerfile: Dockerfile.frontend
      args:
        PORTAL: secretary
    container_name: legal-crm-secretary
    restart: unless-stopped
    ports:
      - "3003:80"
    environment:
      REACT_APP_API_URL: http://backend:5000/api/v1
      REACT_APP_WS_URL: ws://backend:5000
    depends_on:
      - backend
    networks:
      - legal-crm-network

  # Client Portal
  client-portal:
    build:
      context: ./
      dockerfile: Dockerfile.frontend
      args:
        PORTAL: client
    container_name: legal-crm-client
    restart: unless-stopped
    ports:
      - "3004:80"
    environment:
      REACT_APP_API_URL: http://backend:5000/api/v1
      REACT_APP_WS_URL: ws://backend:5000
    depends_on:
      - backend
    networks:
      - legal-crm-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: legal-crm-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - admin-portal
      - supervisor-portal
      - secretary-portal
      - client-portal
    networks:
      - legal-crm-network

  # Backup Service
  backup:
    build:
      context: ./backend
      dockerfile: Dockerfile.backup
    container_name: legal-crm-backup
    restart: unless-stopped
    environment:
      MONGO_URI: mongodb://admin:${MONGO_PASSWORD:-secretpassword}@mongodb:27017/legal-crm?authSource=admin
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 3 * * *}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
    volumes:
      - ./backend/backups:/app/backups
      - ./backend/uploads:/app/uploads:ro
    depends_on:
      - mongodb
    networks:
      - legal-crm-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: legal-crm-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - legal-crm-network

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: legal-crm-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - legal-crm-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  legal-crm-network:
    driver: bridge